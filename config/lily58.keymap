#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../zmk-nodefree-config/keypos_def/keypos_58keys.h"
#include "../zmk-nodefree-config/helper.h"

#define XXX &none
#define ___ &trans

// Bluetooth keys
#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

// Layers
#define DEF 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FN 4

/* GLOBAL SETTINGS */
#define QUICK_TAP_MS 175

// Sticky-key config
&sk {  
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

// Sticky-layer config
&sl {  
    ignore-modifiers;          // allow chording sticky mods & layers
};

// Layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* CONDITIONAL LAYERS */
// Activate NUM layer when NAV is held for vim-type navigation (e.g. 10j)
// ZMK_CONDITIONAL_LAYER(NAV, NUM)

/* HOMEROW MODS */
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3
#define KEYS_L \
    LT0 LT1 LT2 LT3 LT4 LT5 \
    LM0 LM1 LM2 LM3 LM4 LM5 \
    LB0 LB1 LB2 LB3 LB4 LB5 \
    LF0 LF1 LF2 LF3 LF4 LF5 LEC
#define KEYS_R \
    RT0 RT1 RT2 RT3 RT4 RT5 \
    RM0 RM1 RM2 RM3 RM4 RM5 \
    RB0 RB1 RB2 RB3 RB4 RB5 \
    RF0 RF1 RF2 RF3 RF4 RF5 REC

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* MOD MORPHS */
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: slash | shift + tap: qmark | shift + ctrl + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp SLASH, &qexcl_inner)
SIMPLE_MORPH(qexcl_inner, CTL, &kp QMARK, &kp EXCL)

// tap: bspc | shift + tap: del | hold: layer hold
SIMPLE_MORPH(bs_del, SFT, &kp BSPC, &kp DEL)
ZMK_BEHAVIOR(lt_bspc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&bs_del>;
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

/* COMBOS */
// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

ZMK_COMBO(esc, &kp ESC,    LM3 LM2, DEF NAV NUM SYM FN, COMBO_TERM_SLOW)
ZMK_COMBO(ret, &kp RETURN, LM2 LM1, DEF NAV NUM SYM FN, COMBO_TERM_SLOW)
ZMK_COMBO(min, &kp MINUS,  RF1 RF2, DEF NAV NUM SYM FN, COMBO_TERM_SLOW)
ZMK_COMBO(und, &kp UNDER,  RF2 RF3, DEF NAV NUM SYM FN, COMBO_TERM_SLOW)

/* CUSTOM BEHAVIORS */
// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    // ignored-key-positions = <LT2>;
)

// Window swapper
ZMK_BEHAVIOR(win_swap, tri_state,
    bindings = <&kt LGUI &kt LCTRL>, <&kp RIGHT>, <&kt LGUI &kt LCTRL>;
    // ignored-key-positions = <LT2>;
)

/* MACROS */
ZMK_BEHAVIOR(win_left, macro, 
    wait-ms = <0>;
    tap-ms = <1>;
    bindings 
        = <&macro_press &kp LGUI &kp LCTRL>
        , <&macro_tap &kp LEFT>
        , <&macro_release &kp LGUI &kp LCTRL>;
)
ZMK_BEHAVIOR(win_right, macro, 
    wait-ms = <0>;
    tap-ms = <1>;
    bindings 
        = <&macro_press &kp LGUI &kp LCTRL>
        , <&macro_tap &kp RIGHT>
        , <&macro_release &kp LGUI &kp LCTRL>;
)

#define BRACE_MACRO(NAME, L, R) \
    ZMK_BEHAVIOR(NAME, macro, \
        wait-ms = <0>; \
        tap-ms = <1>; \
        bindings = <&macro_tap L R &kp LEFT> \
    )

BRACE_MACRO(bkts, &kp LBKT, &kp RBKT)
BRACE_MACRO(brcs, &kp LBRC, &kp RBRC)
BRACE_MACRO(parens, &kp LPAR, &kp RPAR)

ZMK_LAYER(base, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           &kp Q         &kp W         &kp F         &kp P         &kp B                                       &kp J         &kp L         &kp U         &kp Y         &kp SQT       ___ 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &hml LGUI A   &hml LALT R   &hml LCTRL S  &hml LSHFT T  &kp G                                       &kp M         &hmr RSHFT N  &hmr RCTRL E  &hmr RALT I   &hmr RGUI O   ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &kp Z         &kp X         &kp C         &kp D         &kp V         ___             ___           &kp K         &kp H         &comma_morph  &dot_morph    &qexcl        ___ 
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              ___           ___           &lt FN TAB   &lt_bspc NAV 0  &lt SYM SPACE  &lt NUM RET   &smart_shft   ___           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(num, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           &kp N7        &kp N8        &kp N9        ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           ___           &kp N4        &kp N5        &kp N6        ___                                         ___           &kp RSHFT     &kp RCTRL     &kp RALT      &kp RGUI      ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &kp N0        &kp N1        &kp N2        &kp N3        ___           ___             ___           ___           ___           ___           ___           ___           ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              ___           ___           &kp N0        ___             ___           ___           ___           ___           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(nav, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           ___           ___                                         ___           &win_left     ___           ___           &win_right    ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           ___           ___           ___           ___           ___                                         ___           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           ___           ___           ___           ___           ___           ___             ___           ___           &kp HOME      &kp PG_DN     &kp PG_UP     &kp END       ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              ___           ___           ___           ___             ___           ___           ___           ___           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(sym, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           &kp LBKT      &kp RBKT      &kp PIPE                                    ___           &kp EQUAL     &kp LT        &kp GT        &kp EXCL      ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &kp CARET     &kp DLLR      &kp LBRC      &kp RBRC      &kp GRAVE                                   ___           &kp AMPS      &kp PRCNT     &kp PLUS      &kp MINUS     ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           ___           ___           &kp LPAR      &kp RPAR      &kp TILDE     ___             ___           ___           &kp HASH      &kp STAR      ___           ___           ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              ___           ___           ___           ___             ___           ___           ___           ___           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(fun, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___                                         ___           ___           ___           ___           ___           ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           &bkts         ___                                                                    _BT_SEL_KEYS_                              ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           &brcs         ___                                         &kp F5        &kp F8       &kp F10        &kp F11       &kp F12       ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           &parens       ___           ___             &out OUT_TOG  ___           &kp C_PREV    &kp C_NEXT    &kp C_PP      ___           ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯ 
                                              ___           ___           ___           ___             ___           ___           ___           ___           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)