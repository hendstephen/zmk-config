#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Layers
#define DEF 0
#define SYM 1
#define NAV 2
#define MSE 3
#define FUN 4

#include "zmk-helpers/helper.h"
#include "macros.dtsi"
#include "mouse.dtsi"
#include "combos.dtsi" // requires layer aliases and helpers

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

// Soft off
&soft_off {
    hold-time-ms = <1000>;
};

// Sticky-key config
&sk {  
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

// Sticky-layer config
&sl {  
    ignore-modifiers;          // allow chording sticky mods & layers
};

// Layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// // Mod-tap config
// &mt {  
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <QUICK_TAP_MS>;
// };

&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

&num_word {  // num-word, requires PR #1451
    layers = <NAV>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

/* CUSTOM KEYCODES */
#define WIN_LEFT LG(LC(LEFT))
#define WIN_RIGHT LG(LC(RIGHT))
#define WIN_LOCK LG(L)
#define WIN_CLOSE LA(F4)
#define CALTDEL LC(LA(DEL))

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_ion, &kp, &ion, KEYS_R THUMBS)

/* Mod morphs */
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: -
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp MINUS)

// tap: dot | shift + tap: colon | ctrl + shift + tap: _
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp UNDER)

// tap: slash | shift + tap: qmark | shift + ctrl + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp SLASH, &qexcl_inner_morph)
SIMPLE_MORPH(qexcl_inner_morph, CTL, &kp QMARK, &kp EXCL)

// tap: bspc | shift + tap: del | hold: layer hold
SIMPLE_MORPH(bs_del, SFT, &kp BSPC, &kp DEL)
ZMK_HOLD_TAP(lt_bspc, 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&bs_del>;
)

// tap: space | shift + tap: bspc | hold: layer hold
SIMPLE_MORPH(sp_bspc, SFT, &kp SPACE, &kp BSPC)
ZMK_HOLD_TAP(lt_spc, 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&sp_bspc>;
)

// tap: num-word | double-tap: sticky num layer | hold: num layer
#define SMART_NUM &lt_num NAV 0
ZMK_HOLD_TAP(lt_num, 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&td_smartnum>;
)
ZMK_TAP_DANCE(td_smartnum, 
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NAV>;
)

// smart shifts
SIMPLE_MORPH(smart_shftl, SFT, &sk LSHFT, &caps_word)
SIMPLE_MORPH(smart_shftr, SFT, &sk RSHFT, &caps_word)

// tap: left click | shift + tap: right click
SIMPLE_MORPH(sftclk, SFT, &mkp LCLK, &mkp RCLK)

/* Layers */
ZMK_LAYER(def,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                                                                                                    X_F
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           &kp Q         &kp W         &kp F         &kp P         &kp B                                       &kp J         &kp L         &kp U         &kp Y         &kp SQT       ___ 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    &smart_shftl  &hml LGUI A   &hml LALT R   &hml LCTRL S  &hml LSHFT T  &kp G                                       &kp M         &hmr RSHFT N  &hmr RCTRL E  &hmr RALT I   &hmr RGUI O   &smart_shftr
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
   &lt_num NAV 0  &kp Z         &kp X         &kp C         &kp D         &kp V                     X_BM              &kp K         &kp H         &comma_morph  &dot_morph    &qexcl        &cdup
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              X_HL          &lt FUN DEL   &lt MSE ESC  &lt_bspc NAV 0  &lt_spc SYM 0  &mt RSHFT RET &lt FUN TAB   X_HR           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(sym,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                                                                                                    X_F
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           &kp LT        &kp GT        &kp AT        &kp UNDER                                   &kp PIPE      &kp MINUS     &kp LBKT      &kp RBKT      &kp GRAVE     ___    
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___      &hml LGUI EXCL &hml LALT MINUS &hml LCTRL PLUS &hml LSHFT EQUAL &kp HASH                                 &kp AMPS  &hmr RSHFT COLON &hmr RCTRL LPAR &hmr RALT RPAR &hmr RGUI SEMI   ___    
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           &kp BSLH      &kp SLASH     &kp STAR      &kp CARET     &kp PRCNT                 X_BM              &kp TILDE     &kp DLLR      &kp LBRC     &kp RBRC       ___           ___          
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              X_HL          ___           &lt_spc NAV 0     ___            ___        ___           ___           X_HR 
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(nav, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                                                                                                    X_F
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp COLON     &kp SLASH     &kp N7        &kp N8        &kp N9        &kp STAR                                     &kp ESC      &kp WIN_LEFT   &kp LS(TAB)   &kp TAB      &kp WIN_RIGHT  ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    &kp DOT     &hml LGUI MINUS &hml LALT N4  &hml LCTRL N5 &hml LSHFT N6 &kp PLUS                                    ___      &hmr RSHFT LEFT &hmr RCTRL DOWN &hmr RALT UP &hmr RGUI RIGHT  ___  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &kp N0        &kp N1        &kp N2        &kp N3        &kp EQUAL                 X_BM              &kp RET       &kp HOME      &kp PG_DN     &kp PG_UP     &kp END       ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              X_HL          ___           ___           ___             ___           ___           ___           X_HR
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(mse, 
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                                                                                                    X_F
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           ___           ___                                         ___           &msc MOVE_UP  &mmv MOVE_UP &msc MOVE_DOWN ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     ___                                         ___        &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT ___          ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤ 
    ___           ___           ___           ___           ___           ___                       X_BM              ___           ___           ___           ___           ___           ___
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯ 
                                              X_HL          ___           ___          ___               ___          &sftclk       ___           X_HR           
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)

ZMK_LAYER(fun,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                                                                                                    X_F
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                ___           &out OUT_USB  &out OUT_BLE  ___           ___           &soft_off
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                                      &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___          &kp WIN_CLOSE  &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP  ___                       X_BM              ___           &kp C_PREV    &kp C_PP     &kp C_NEXT    &kp WIN_CLOSE  ___  
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯ 
                                              X_HL          ___           ___           ___             ___           ___           ___           X_HR
//                                          ╰─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────╯
)